<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require APPPATH . '/libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class PoliticalApi extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function legislators_get()
    {
        //$this->load->database();
//        $last = $this->get('last');
        $this->db->distinct();
        $query = $this->db->get('Legislator');
        $results = $query->result();
        $this->output->set_content_type('application/json');
        $this->output->set_output(json_encode($results));
    }

    public function legislator_last_name_get()
    {
        $this->db->distinct();
        $last_name = $this->get('last');
        $lastValue = $this->db->where('last_name', $last_name);
        $query = $this->db->get('Legislator');
        $results = $query->result();
        $this->output->set_content_type('application/json');
        $this->output->set_output(json_encode($results));
//        $this->output->set_content_type('application/json');
//        $this->output->set_output(json_encode($lastValue));
//        var_dump($result);
//        $query = $this->db->get('Legislator');
//        $results = $query->result();
//        $this->output->set_content_type('application/json');
//        $this->output->set_output(json_encode($last));
    }









    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

}
/////////////////////////// Code //////////////
//return $result
//        foreach($results as $Object)
//        {
//            echo $Object->first_name . " " . $Object->last_name;
//            echo "<br />";
//        }
//        $this->db->where('last_name', $last);
//        $this->db->select("last_name");
//        $this->db->from('Legislator');
//
//        $result = $this->db->get();
//        if($result->num_rows() == 1)
//        {
//            $final = $result->row(0)->last_name;
//            echo $final;
//        }
//
//        var_dump($result);


//        // Users from a data store e.g. database
//        $users = [
//            ['id' => 1, 'name' => 'John', 'email' => 'john@example.com', 'fact' => 'Loves coding'],
//            ['id' => 2, 'name' => 'Jim', 'email' => 'jim@example.com', 'fact' => 'Developed on CodeIgniter'],
//            ['id' => 3, 'name' => 'Jane', 'email' => 'jane@example.com', 'fact' => 'Lives in the USA', ['hobbies' => ['guitar', 'cycling']]],
//        ];
//
//        $id = $this->get('id');
//
//        // If the id parameter doesn't exist return all the users
//
//        if ($id === NULL)
//        {
//            // Check if the users data store contains users (in case the database result returns NULL)
//            if ($users)
//            {
//                // Set the response and exit
//                $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
//            }
//            else
//            {
//                // Set the response and exit
//                $this->response([
//                    'status' => FALSE,
//                    'message' => 'No users were found'
//                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
//            }
//        }
//
//        // Find and return a single record for a particular user.
//
//        $id = (int) $id;
//
//        // Validate the id.
//        if ($id <= 0)
//        {
//            // Invalid id, set the response and exit.
//            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
//        }
//
//        // Get the user from the array, using the id as key for retreival.
//        // Usually a model is to be used for this.
//
//        $user = NULL;
//
//        if (!empty($users))
//        {
//            foreach ($users as $key => $value)
//            {
//                if (isset($value['id']) && $value['id'] === $id)
//                {
//                    $user = $value;
//                }
//            }
//        }
//
//        if (!empty($user))
//        {
//            $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
//        }
//        else
//        {
//            $this->set_response([
//                'status' => FALSE,
//                'message' => 'User could not be found'
//            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
//        }